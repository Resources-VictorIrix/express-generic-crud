{"name":"Express-crud","tagline":"Express CRUD Generic Module","body":"#Express-CRUD\r\n============\r\n\r\n## Table Of Content\r\n- [General](#general)\r\n  - [Requirements](#requirements)\r\n- [Installation](#installation)\r\n- [Configuration](#configuration)\r\n  - [Importing The Module](#importing-the-module)\r\n  - [Initialization](#initialization)\r\n- [Usage](#usage)\r\n  - [Creating a Simple CRUD Module](#creating-a-simple-crud-module)\r\n  - [Creating a Simple Static Module](#creating-a-simple-static-module)\r\n  - [Using Hooks](#using-hooks)\r\n    - [Pre Hooks](#pre-hooks)\r\n    - [Post Hooks](#post-hooks)\r\n  - [Model Dependecies](#model-dependecies)\r\n- [Additional Information](#additional-information)\r\n  - [Options Object](#options-object)\r\n  - [Output Object](#output-object)\r\n\r\n##General\r\nA simple to use, server side, generic module for adding CRUD module to your Express application.\r\nThis module will allow you to add a simple CRUD module for a specific model / static file without you to have to worry about common modules implementations.\r\n\r\n###Requirements\r\nFor you to be able to use this module you need the follwing things:\r\n- Express Application\r\n- Static File to use / Mongoose Scheme\r\n\r\n##Installation\r\nTo install the module use:\r\n```\r\nnpm install express-generic-crud\r\n```\r\n\r\n##Configuration\r\n###Importing The Module\r\nTo import the module use the following:\r\n```\r\nvar expressCRUD = require('express-crud');\r\n```\r\n\r\n\r\n###Initialization\r\nTo initialize thhe module use the _init_ API\r\nUsage:\r\n```\r\n/**\r\n  @param: app - {Express Application}\r\n**/\r\nexpressCRUD.init(app);\r\n```\r\n  \r\nThe Express-CRUD module will automatially add a crud method which would be described within the [Usage](#usage) section\r\n\r\n\r\n##Usage\r\n###Creating a Simple CRUD Module\r\nTo create a simple CRUD module you would need to have a basic mongoose scheme which it you can set with the following API on the Express Application:\r\n```\r\n/**\r\n  This method is added dynamically on runtime,\r\n  This is a helper method to create generic CRUD module\r\n  @param: path - {String} - path which will be routed to the application\r\n  @param: scheme - {Mongoose Model} - The Model which will be used to create the CRUD operations on\r\n  @returns: {Crud} - Crud object to manipulate\r\n**/\r\nvar crud = app.crud(path, scheme);\r\n```\r\n\r\nAfter using this method, The followings routes would be provided for you\r\n- /path (GET) - Get array list from the DB\r\n- /path (POST) - Create new item in DB with specific details\r\n- /path/:id (GET) - Get a specific item with id of :id\r\n- /path/:id (PUT) - Update a specific item within the DB\r\n- /path/:id (DELETE) - Delete specific item from DB\r\n\r\n###Creating a Simple Static Module\r\nTo create a get method to a staitc data, use the same API with the following options parameter:\r\n```\r\n/**\r\n  This method is added dynamically on runtime,\r\n  This is a helper method to create static data API\r\n  @param: path - {String} - path which will be routed to the application\r\n  @param: data - {Object} - The object you want to open API to\r\n  @param: options - {Object} with:\r\n            resourceType - {String} static for exporting static data object\r\n**/\r\napp.crud(path, data, {resourceType : 'static'});\r\n```\r\n\r\n###Using Hooks\r\nHooks are a way for the developer to intervene with the internal of the CRUD generic module,\r\nThere are two available hooks: pre-hooks and post-hooks\r\n\r\n####Pre Hooks\r\nPre-Hooks are available for each operation that been defined and one can register to listen to such a hook with the following API on the Crud object (See [Creating A Simple CRUD Module](#creating-a-simple-crud-module)):\r\n```\r\n/**\r\n  Registration of Pre-Hook method\r\n  @param operation - {String} one of the followings:\r\n                      -. list\r\n                      -. create\r\n                      -. read\r\n                      -. update\r\n                      -. delete\r\n  @param callback - {Function} in the form of callback(context, next)\r\n                      context - {Context} object\r\n                      next - {Function} async next method - must be called to complete the operation\r\n*/\r\ncrud.pre(operation, callback);\r\n```\r\n\r\nThe Context object is overloaded with relevant details for each operation,\r\nHere is the list of available methods for Context objects per opeartion:\r\n- Create / Update Operation:\r\n  ```\r\n  /**\r\n    Create / Update Instance Details Getter\r\n    @returns {Object} - The details which with them the data would be created / updated\r\n  */\r\n  context.getDetails();\r\n  \r\n  /**\r\n    Create / Updtate Instance Details Setter\r\n    @param newDetails - {Object} set the details which with them the new instance would be created / updated\r\n  */\r\n  context.setDetails(newDetails);\r\n  \r\n  ```\r\n\r\nFor an example, to use a pre hook for create operation, use the following example:\r\n  ```\r\n  // Create a pre create hook\r\n  crud.pre('create', function(context, next){\r\n      console.log('Pre Create Hook');\r\n\r\n      next();\r\n  });\r\n  ```\r\n\r\n####Post Hooks\r\nPost-Hooks are available for each operation that been defined and one can register to listen to such a hook with the following API on the Crud object (See [Creating A Simple CRUD Module](#creating-a-simple-crud-module)):\r\n```\r\n/**\r\n  Registration of Post-Hook method\r\n  @param operation - {String} one of the followings:\r\n                      -. list\r\n                      -. create\r\n                      -. read\r\n                      -. update\r\n                      -. delete\r\n  @param callback - {Function} in the form of callback(context, next)\r\n                      context - {Context} object\r\n                      next - {Function} async next method - must be called to complete the operation\r\n*/\r\ncrud.post(operation, callback);\r\n```\r\n\r\nThe Context object is overloaded with relevant details for each operation,\r\nHere is the list of available methods for Context objects per opeartion:\r\n- All Operations:\r\n  ```\r\n  /**\r\n    Getter for the output object\r\n    @returns {Output}\r\n  */\r\n  context.getOutput();\r\n  \r\n  /**\r\n    Setter for a new Output object\r\n  */\r\n  context.setOutput(newDetails);\r\n  ```\r\n  \r\n  For you to get the relevant error / result - use the getResult(), getError() getters which their documentation is found under [Output Object](#output-object)\r\n  \r\nFor the API call:\r\n```\r\n  var result = context.getOutput().getResult();\r\n```\r\nhere is a relevant result for each operation that been done\r\n- List Operation:\r\n  result - {Array} of instances\r\n\r\n- Create / Read / Update / Delete Operation\r\n  result - {Instance} single scheme instance\r\n  \r\nFor an example of a post hook after a read operation:\r\n```\r\n  // Register for post read hook\r\n  crud.post('read', function(context, next){\r\n      console.log('Post Read');\r\n      \r\n      next();\r\n  });\r\n```\r\n  \r\n###Model Dependecies\r\nThis feature should be available soon.\r\n\r\n\r\n##Additional Information\r\n###Options Object\r\nThis is an object as a thirs parameter to the crud method, it can consist of the followings:\r\n  - resourceType - {String} - Set the resource of which to create the CRUD module\r\n    - mongodb - use mongodb as the resource to use the CRUD for\r\n    - static - export static data object API\r\n  - id - {String} - id which by it db index will be resolved upon\r\n\r\n###Output Object\r\n```\r\n/**\r\n * Error getter\r\n * @returns {Error}\r\n */\r\nfunction getError();\r\n\r\n/**\r\n * Error setter\r\n * @param {Error} - New Error\r\n */\r\nfunction setError(err);\r\n\r\n/**\r\n * Result getter\r\n * @returns {*}\r\n */\r\nfunction getResult();\r\n\r\n/**\r\n * Result setter\r\n * @param {Object} new Result\r\n */\r\nfunction setResult(result);\r\n\r\n/**\r\n * Is Error\r\n * @returns {boolean}\r\n */\r\nfunction isError();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}